// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment_methods.sql

package core

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createPaymentMethod = `-- name: CreatePaymentMethod :one
INSERT INTO payment_methods (
    user_id,
    type,
    provider_token,
    is_default
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, user_id, type, provider_token, is_default, created_at
`

type CreatePaymentMethodParams struct {
	UserID        uuid.UUID
	Type          string
	ProviderToken string
	IsDefault     sql.NullBool
}

func (q *Queries) CreatePaymentMethod(ctx context.Context, arg CreatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, createPaymentMethod,
		arg.UserID,
		arg.Type,
		arg.ProviderToken,
		arg.IsDefault,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.ProviderToken,
		&i.IsDefault,
		&i.CreatedAt,
	)
	return i, err
}

const deletePaymentMethod = `-- name: DeletePaymentMethod :exec
DELETE FROM payment_methods
WHERE user_id = $1
`

func (q *Queries) DeletePaymentMethod(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePaymentMethod, userID)
	return err
}

const getPaymentMethodByUserID = `-- name: GetPaymentMethodByUserID :one
SELECT id, user_id, type, provider_token, is_default, created_at FROM payment_methods
WHERE user_id = $1
`

func (q *Queries) GetPaymentMethodByUserID(ctx context.Context, userID uuid.UUID) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, getPaymentMethodByUserID, userID)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.ProviderToken,
		&i.IsDefault,
		&i.CreatedAt,
	)
	return i, err
}

const updatePaymentMethod = `-- name: UpdatePaymentMethod :one
UPDATE payment_methods
SET
    type           = $2,
    provider_token = $3,
    is_default     = $4
WHERE user_id = $1
    RETURNING id, user_id, type, provider_token, is_default, created_at
`

type UpdatePaymentMethodParams struct {
	UserID        uuid.UUID
	Type          string
	ProviderToken string
	IsDefault     sql.NullBool
}

func (q *Queries) UpdatePaymentMethod(ctx context.Context, arg UpdatePaymentMethodParams) (PaymentMethod, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentMethod,
		arg.UserID,
		arg.Type,
		arg.ProviderToken,
		arg.IsDefault,
	)
	var i PaymentMethod
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.ProviderToken,
		&i.IsDefault,
		&i.CreatedAt,
	)
	return i, err
}
