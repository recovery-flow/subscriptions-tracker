// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription_transactions.sql

package core

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO subscription_transactions (
    user_id,
    payment_method_id,
    amount,
    currency,
    status,
    payment_provider,
    payment_id
) VALUES (
             $1, $2, $3, $4, $5, $6, $7
         )
    RETURNING id, user_id, payment_method_id, amount, currency, status, payment_provider, payment_id, transaction_date
`

type CreateTransactionParams struct {
	UserID          uuid.UUID
	PaymentMethodID uuid.NullUUID
	Amount          string
	Currency        string
	Status          string
	PaymentProvider string
	PaymentID       sql.NullString
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (SubscriptionTransaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.UserID,
		arg.PaymentMethodID,
		arg.Amount,
		arg.Currency,
		arg.Status,
		arg.PaymentProvider,
		arg.PaymentID,
	)
	var i SubscriptionTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentMethodID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentProvider,
		&i.PaymentID,
		&i.TransactionDate,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM subscription_transactions
WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, user_id, payment_method_id, amount, currency, status, payment_provider, payment_id, transaction_date FROM subscription_transactions
WHERE id = $1
`

func (q *Queries) GetTransactionByID(ctx context.Context, id uuid.UUID) (SubscriptionTransaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, id)
	var i SubscriptionTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentMethodID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentProvider,
		&i.PaymentID,
		&i.TransactionDate,
	)
	return i, err
}

const listTransactionsByUserID = `-- name: ListTransactionsByUserID :many
SELECT id, user_id, payment_method_id, amount, currency, status, payment_provider, payment_id, transaction_date FROM subscription_transactions
WHERE user_id = $1
ORDER BY transaction_date DESC
`

func (q *Queries) ListTransactionsByUserID(ctx context.Context, userID uuid.UUID) ([]SubscriptionTransaction, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionTransaction
	for rows.Next() {
		var i SubscriptionTransaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PaymentMethodID,
			&i.Amount,
			&i.Currency,
			&i.Status,
			&i.PaymentProvider,
			&i.PaymentID,
			&i.TransactionDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :one
UPDATE subscription_transactions
SET
    status = $2
WHERE id = $1
    RETURNING id, user_id, payment_method_id, amount, currency, status, payment_provider, payment_id, transaction_date
`

type UpdateTransactionStatusParams struct {
	ID     uuid.UUID
	Status string
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) (SubscriptionTransaction, error) {
	row := q.db.QueryRowContext(ctx, updateTransactionStatus, arg.ID, arg.Status)
	var i SubscriptionTransaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PaymentMethodID,
		&i.Amount,
		&i.Currency,
		&i.Status,
		&i.PaymentProvider,
		&i.PaymentID,
		&i.TransactionDate,
	)
	return i, err
}
