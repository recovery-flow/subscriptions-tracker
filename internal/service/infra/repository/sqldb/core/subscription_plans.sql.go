// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription_plans.sql

package core

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSubscriptionPlan = `-- name: CreateSubscriptionPlan :one
INSERT INTO subscription_plans (
    name,
    description,
    price,
    billing_cycle,
    currency
) VALUES (
             $1, $2, $3, $4, $5
         )
    RETURNING id, name, description, price, billing_cycle, currency, created_at
`

type CreateSubscriptionPlanParams struct {
	Name         string
	Description  sql.NullString
	Price        string
	BillingCycle string
	Currency     string
}

func (q *Queries) CreateSubscriptionPlan(ctx context.Context, arg CreateSubscriptionPlanParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, createSubscriptionPlan,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.BillingCycle,
		arg.Currency,
	)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.BillingCycle,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubscriptionPlan = `-- name: DeleteSubscriptionPlan :exec
DELETE FROM subscription_plans
WHERE id = $1
`

func (q *Queries) DeleteSubscriptionPlan(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionPlan, id)
	return err
}

const getSubscriptionPlanByID = `-- name: GetSubscriptionPlanByID :one
SELECT id, name, description, price, billing_cycle, currency, created_at FROM subscription_plans
WHERE id = $1
`

func (q *Queries) GetSubscriptionPlanByID(ctx context.Context, id uuid.UUID) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionPlanByID, id)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.BillingCycle,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listSubscriptionPlans = `-- name: ListSubscriptionPlans :many
SELECT id, name, description, price, billing_cycle, currency, created_at FROM subscription_plans
ORDER BY created_at DESC
`

func (q *Queries) ListSubscriptionPlans(ctx context.Context) ([]SubscriptionPlan, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptionPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionPlan
	for rows.Next() {
		var i SubscriptionPlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.BillingCycle,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionPlan = `-- name: UpdateSubscriptionPlan :one
UPDATE subscription_plans
SET
    name = $2,
    description = $3,
    price = $4,
    billing_cycle = $5,
    currency = $6
WHERE id = $1
    RETURNING id, name, description, price, billing_cycle, currency, created_at
`

type UpdateSubscriptionPlanParams struct {
	ID           uuid.UUID
	Name         string
	Description  sql.NullString
	Price        string
	BillingCycle string
	Currency     string
}

func (q *Queries) UpdateSubscriptionPlan(ctx context.Context, arg UpdateSubscriptionPlanParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionPlan,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.BillingCycle,
		arg.Currency,
	)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.BillingCycle,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
