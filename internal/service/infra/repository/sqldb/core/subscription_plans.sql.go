// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription_plans.sql

package core

import (
	"context"

	"github.com/google/uuid"
)

const createSubscriptionPlanVariant = `-- name: CreateSubscriptionPlanVariant :one
INSERT INTO subscription_plans (
    type_id,
    price,
    billing_interval,
    billing_interval_unit,
    currency
) VALUES (
             $1, $2, $3, $4, $5
         )
    RETURNING id, type_id, price, billing_interval, billing_interval_unit, currency, created_at
`

type CreateSubscriptionPlanVariantParams struct {
	TypeID              uuid.UUID
	Price               string
	BillingInterval     int32
	BillingIntervalUnit string
	Currency            string
}

func (q *Queries) CreateSubscriptionPlanVariant(ctx context.Context, arg CreateSubscriptionPlanVariantParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, createSubscriptionPlanVariant,
		arg.TypeID,
		arg.Price,
		arg.BillingInterval,
		arg.BillingIntervalUnit,
		arg.Currency,
	)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.TypeID,
		&i.Price,
		&i.BillingInterval,
		&i.BillingIntervalUnit,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubscriptionPlanVariant = `-- name: DeleteSubscriptionPlanVariant :exec
DELETE FROM subscription_plans
WHERE id = $1
`

func (q *Queries) DeleteSubscriptionPlanVariant(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionPlanVariant, id)
	return err
}

const getSubscriptionPlanVariantByID = `-- name: GetSubscriptionPlanVariantByID :one
SELECT id, type_id, price, billing_interval, billing_interval_unit, currency, created_at FROM subscription_plans
WHERE id = $1
`

func (q *Queries) GetSubscriptionPlanVariantByID(ctx context.Context, id uuid.UUID) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionPlanVariantByID, id)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.TypeID,
		&i.Price,
		&i.BillingInterval,
		&i.BillingIntervalUnit,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const listSubscriptionPlanVariantsByType = `-- name: ListSubscriptionPlanVariantsByType :many
SELECT id, type_id, price, billing_interval, billing_interval_unit, currency, created_at FROM subscription_plans
WHERE type_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListSubscriptionPlanVariantsByType(ctx context.Context, typeID uuid.UUID) ([]SubscriptionPlan, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptionPlanVariantsByType, typeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionPlan
	for rows.Next() {
		var i SubscriptionPlan
		if err := rows.Scan(
			&i.ID,
			&i.TypeID,
			&i.Price,
			&i.BillingInterval,
			&i.BillingIntervalUnit,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionPlanVariant = `-- name: UpdateSubscriptionPlanVariant :one
UPDATE subscription_plans
SET
    price = $2,
    billing_interval = $3,
    billing_interval_unit = $4,
    currency = $5
WHERE id = $1
    RETURNING id, type_id, price, billing_interval, billing_interval_unit, currency, created_at
`

type UpdateSubscriptionPlanVariantParams struct {
	ID                  uuid.UUID
	Price               string
	BillingInterval     int32
	BillingIntervalUnit string
	Currency            string
}

func (q *Queries) UpdateSubscriptionPlanVariant(ctx context.Context, arg UpdateSubscriptionPlanVariantParams) (SubscriptionPlan, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionPlanVariant,
		arg.ID,
		arg.Price,
		arg.BillingInterval,
		arg.BillingIntervalUnit,
		arg.Currency,
	)
	var i SubscriptionPlan
	err := row.Scan(
		&i.ID,
		&i.TypeID,
		&i.Price,
		&i.BillingInterval,
		&i.BillingIntervalUnit,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
