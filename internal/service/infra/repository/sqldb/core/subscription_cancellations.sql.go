// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription_cancellations.sql

package core

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSubscriptionCancellation = `-- name: CreateSubscriptionCancellation :one

INSERT INTO subscription_cancellations (
    user_id,
    reason
) VALUES (
             $1, $2
         )
    RETURNING id, user_id, cancellation_date, reason
`

type CreateSubscriptionCancellationParams struct {
	UserID uuid.UUID
	Reason sql.NullString
}

// -----------------------------------------------
// CRUD и полезные запросы
// -----------------------------------------------
func (q *Queries) CreateSubscriptionCancellation(ctx context.Context, arg CreateSubscriptionCancellationParams) (SubscriptionCancellation, error) {
	row := q.db.QueryRowContext(ctx, createSubscriptionCancellation, arg.UserID, arg.Reason)
	var i SubscriptionCancellation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CancellationDate,
		&i.Reason,
	)
	return i, err
}

const createSubscriptionCancellationsTable = `-- name: CreateSubscriptionCancellationsTable :exec
CREATE TABLE IF NOT EXISTS subscription_cancellations (
                                                          id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES subscriptions(user_id) ON DELETE CASCADE,
    cancellation_date TIMESTAMP DEFAULT NOW(),
    reason TEXT
    )
`

func (q *Queries) CreateSubscriptionCancellationsTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createSubscriptionCancellationsTable)
	return err
}

const deleteSubscriptionCancellation = `-- name: DeleteSubscriptionCancellation :exec
DELETE FROM subscription_cancellations
WHERE id = $1
`

func (q *Queries) DeleteSubscriptionCancellation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionCancellation, id)
	return err
}

const getSubscriptionCancellationByID = `-- name: GetSubscriptionCancellationByID :one
SELECT id, user_id, cancellation_date, reason FROM subscription_cancellations
WHERE id = $1
`

func (q *Queries) GetSubscriptionCancellationByID(ctx context.Context, id uuid.UUID) (SubscriptionCancellation, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionCancellationByID, id)
	var i SubscriptionCancellation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CancellationDate,
		&i.Reason,
	)
	return i, err
}

const listCancellationsByUserID = `-- name: ListCancellationsByUserID :many
SELECT id, user_id, cancellation_date, reason FROM subscription_cancellations
WHERE user_id = $1
ORDER BY cancellation_date DESC
`

func (q *Queries) ListCancellationsByUserID(ctx context.Context, userID uuid.UUID) ([]SubscriptionCancellation, error) {
	rows, err := q.db.QueryContext(ctx, listCancellationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionCancellation
	for rows.Next() {
		var i SubscriptionCancellation
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CancellationDate,
			&i.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
