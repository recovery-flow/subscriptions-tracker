// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscription_types.sql

package core

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createSubscriptionType = `-- name: CreateSubscriptionType :one
INSERT INTO subscription_types (
    name,
    description
) VALUES (
             $1, $2
         )
    RETURNING id, name, description, created_at
`

type CreateSubscriptionTypeParams struct {
	Name        string
	Description sql.NullString
}

func (q *Queries) CreateSubscriptionType(ctx context.Context, arg CreateSubscriptionTypeParams) (SubscriptionType, error) {
	row := q.db.QueryRowContext(ctx, createSubscriptionType, arg.Name, arg.Description)
	var i SubscriptionType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteSubscriptionType = `-- name: DeleteSubscriptionType :exec
DELETE FROM subscription_types
WHERE id = $1
`

func (q *Queries) DeleteSubscriptionType(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptionType, id)
	return err
}

const getSubscriptionTypeByID = `-- name: GetSubscriptionTypeByID :one
SELECT id, name, description, created_at FROM subscription_types
WHERE id = $1
`

func (q *Queries) GetSubscriptionTypeByID(ctx context.Context, id uuid.UUID) (SubscriptionType, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionTypeByID, id)
	var i SubscriptionType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listSubscriptionTypes = `-- name: ListSubscriptionTypes :many
SELECT id, name, description, created_at FROM subscription_types
ORDER BY created_at DESC
`

func (q *Queries) ListSubscriptionTypes(ctx context.Context) ([]SubscriptionType, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptionTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SubscriptionType
	for rows.Next() {
		var i SubscriptionType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptionType = `-- name: UpdateSubscriptionType :one
UPDATE subscription_types
SET
    name = $2,
    description = $3
WHERE id = $1
    RETURNING id, name, description, created_at
`

type UpdateSubscriptionTypeParams struct {
	ID          uuid.UUID
	Name        string
	Description sql.NullString
}

func (q *Queries) UpdateSubscriptionType(ctx context.Context, arg UpdateSubscriptionTypeParams) (SubscriptionType, error) {
	row := q.db.QueryRowContext(ctx, updateSubscriptionType, arg.ID, arg.Name, arg.Description)
	var i SubscriptionType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
