// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: subscriptions.sql

package core

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (
    user_id,
    plan_id,
    payment_method_id,
    status,
    start_date,
    end_date
) VALUES (
             $1, $2, $3, $4, $5, $6
         )
    RETURNING user_id, plan_id, payment_method_id, status, start_date, end_date, created_at, updated_at
`

type CreateSubscriptionParams struct {
	UserID          uuid.UUID
	PlanID          uuid.UUID
	PaymentMethodID uuid.NullUUID
	Status          string
	StartDate       time.Time
	EndDate         time.Time
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription,
		arg.UserID,
		arg.PlanID,
		arg.PaymentMethodID,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	var i Subscription
	err := row.Scan(
		&i.UserID,
		&i.PlanID,
		&i.PaymentMethodID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions
WHERE user_id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, userID)
	return err
}

const getSubscriptionByUserID = `-- name: GetSubscriptionByUserID :one
SELECT user_id, plan_id, payment_method_id, status, start_date, end_date, created_at, updated_at FROM subscriptions
WHERE user_id = $1
`

func (q *Queries) GetSubscriptionByUserID(ctx context.Context, userID uuid.UUID) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionByUserID, userID)
	var i Subscription
	err := row.Scan(
		&i.UserID,
		&i.PlanID,
		&i.PaymentMethodID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE subscriptions
SET
    plan_id           = $2,
    payment_method_id = $3,
    status            = $4,
    start_date        = $5,
    end_date          = $6,
    updated_at        = NOW()
WHERE user_id = $1
    RETURNING user_id, plan_id, payment_method_id, status, start_date, end_date, created_at, updated_at
`

type UpdateSubscriptionParams struct {
	UserID          uuid.UUID
	PlanID          uuid.UUID
	PaymentMethodID uuid.NullUUID
	Status          string
	StartDate       time.Time
	EndDate         time.Time
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, updateSubscription,
		arg.UserID,
		arg.PlanID,
		arg.PaymentMethodID,
		arg.Status,
		arg.StartDate,
		arg.EndDate,
	)
	var i Subscription
	err := row.Scan(
		&i.UserID,
		&i.PlanID,
		&i.PaymentMethodID,
		&i.Status,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
