// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: billing_schedules.sql

package core

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBillingSchedule = `-- name: CreateBillingSchedule :one

INSERT INTO billing_schedules (
    user_id,
    scheduled_date,
    attempted_date,
    status
) VALUES (
             $1, $2, $3, $4
         )
    RETURNING id, user_id, scheduled_date, attempted_date, status, created_at
`

type CreateBillingScheduleParams struct {
	UserID        uuid.UUID
	ScheduledDate time.Time
	AttemptedDate sql.NullTime
	Status        string
}

// -----------------------------------------------
// CRUD и полезные запросы
// -----------------------------------------------
func (q *Queries) CreateBillingSchedule(ctx context.Context, arg CreateBillingScheduleParams) (BillingSchedule, error) {
	row := q.db.QueryRowContext(ctx, createBillingSchedule,
		arg.UserID,
		arg.ScheduledDate,
		arg.AttemptedDate,
		arg.Status,
	)
	var i BillingSchedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ScheduledDate,
		&i.AttemptedDate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createBillingSchedulesTable = `-- name: CreateBillingSchedulesTable :exec
CREATE TABLE IF NOT EXISTS billing_schedules (
                                                 id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES subscriptions(user_id) ON DELETE CASCADE,
    scheduled_date TIMESTAMP NOT NULL,  -- Запланированная дата списания
    attempted_date TIMESTAMP,           -- Фактическая дата списания
    status VARCHAR(20) NOT NULL CHECK (status IN ('scheduled', 'processed', 'failed')),
    created_at TIMESTAMP DEFAULT NOW()
    )
`

func (q *Queries) CreateBillingSchedulesTable(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createBillingSchedulesTable)
	return err
}

const deleteBillingSchedule = `-- name: DeleteBillingSchedule :exec
DELETE FROM billing_schedules
WHERE id = $1
`

func (q *Queries) DeleteBillingSchedule(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteBillingSchedule, id)
	return err
}

const getBillingScheduleByID = `-- name: GetBillingScheduleByID :one
SELECT id, user_id, scheduled_date, attempted_date, status, created_at FROM billing_schedules
WHERE id = $1
`

func (q *Queries) GetBillingScheduleByID(ctx context.Context, id uuid.UUID) (BillingSchedule, error) {
	row := q.db.QueryRowContext(ctx, getBillingScheduleByID, id)
	var i BillingSchedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ScheduledDate,
		&i.AttemptedDate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listSchedulesByUserID = `-- name: ListSchedulesByUserID :many
SELECT id, user_id, scheduled_date, attempted_date, status, created_at FROM billing_schedules
WHERE user_id = $1
ORDER BY scheduled_date DESC
`

func (q *Queries) ListSchedulesByUserID(ctx context.Context, userID uuid.UUID) ([]BillingSchedule, error) {
	rows, err := q.db.QueryContext(ctx, listSchedulesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BillingSchedule
	for rows.Next() {
		var i BillingSchedule
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ScheduledDate,
			&i.AttemptedDate,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBillingSchedule = `-- name: UpdateBillingSchedule :one
UPDATE billing_schedules
SET
    attempted_date = $2,
    status         = $3
WHERE id = $1
    RETURNING id, user_id, scheduled_date, attempted_date, status, created_at
`

type UpdateBillingScheduleParams struct {
	ID            uuid.UUID
	AttemptedDate sql.NullTime
	Status        string
}

func (q *Queries) UpdateBillingSchedule(ctx context.Context, arg UpdateBillingScheduleParams) (BillingSchedule, error) {
	row := q.db.QueryRowContext(ctx, updateBillingSchedule, arg.ID, arg.AttemptedDate, arg.Status)
	var i BillingSchedule
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ScheduledDate,
		&i.AttemptedDate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
