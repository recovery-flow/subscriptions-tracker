/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubscriptionPlanDataRelationships type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlanDataRelationships{}

// SubscriptionPlanDataRelationships struct for SubscriptionPlanDataRelationships
type SubscriptionPlanDataRelationships struct {
	SubscriptionTypeRelation Relationships `json:"subscription_type_relation"`
}

type _SubscriptionPlanDataRelationships SubscriptionPlanDataRelationships

// NewSubscriptionPlanDataRelationships instantiates a new SubscriptionPlanDataRelationships object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlanDataRelationships(subscriptionTypeRelation Relationships) *SubscriptionPlanDataRelationships {
	this := SubscriptionPlanDataRelationships{}
	this.SubscriptionTypeRelation = subscriptionTypeRelation
	return &this
}

// NewSubscriptionPlanDataRelationshipsWithDefaults instantiates a new SubscriptionPlanDataRelationships object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlanDataRelationshipsWithDefaults() *SubscriptionPlanDataRelationships {
	this := SubscriptionPlanDataRelationships{}
	return &this
}

// GetSubscriptionTypeRelation returns the SubscriptionTypeRelation field value
func (o *SubscriptionPlanDataRelationships) GetSubscriptionTypeRelation() Relationships {
	if o == nil {
		var ret Relationships
		return ret
	}

	return o.SubscriptionTypeRelation
}

// GetSubscriptionTypeRelationOk returns a tuple with the SubscriptionTypeRelation field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataRelationships) GetSubscriptionTypeRelationOk() (*Relationships, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubscriptionTypeRelation, true
}

// SetSubscriptionTypeRelation sets field value
func (o *SubscriptionPlanDataRelationships) SetSubscriptionTypeRelation(v Relationships) {
	o.SubscriptionTypeRelation = v
}

func (o SubscriptionPlanDataRelationships) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlanDataRelationships) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscription_type_relation"] = o.SubscriptionTypeRelation
	return toSerialize, nil
}

func (o *SubscriptionPlanDataRelationships) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscription_type_relation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPlanDataRelationships := _SubscriptionPlanDataRelationships{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionPlanDataRelationships)

	if err != nil {
		return err
	}

	*o = SubscriptionPlanDataRelationships(varSubscriptionPlanDataRelationships)

	return err
}

type NullableSubscriptionPlanDataRelationships struct {
	value *SubscriptionPlanDataRelationships
	isSet bool
}

func (v NullableSubscriptionPlanDataRelationships) Get() *SubscriptionPlanDataRelationships {
	return v.value
}

func (v *NullableSubscriptionPlanDataRelationships) Set(val *SubscriptionPlanDataRelationships) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlanDataRelationships) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlanDataRelationships) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlanDataRelationships(val *SubscriptionPlanDataRelationships) *NullableSubscriptionPlanDataRelationships {
	return &NullableSubscriptionPlanDataRelationships{value: val, isSet: true}
}

func (v NullableSubscriptionPlanDataRelationships) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlanDataRelationships) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


