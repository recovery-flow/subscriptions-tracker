/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SubPlanDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubPlanDataAttributes{}

// SubPlanDataAttributes struct for SubPlanDataAttributes
type SubPlanDataAttributes struct {
	// Subscription Plan ID
	TypeId string `json:"type_id"`
	// Subscription Plan Name
	Name string `json:"name"`
	// Subscription Plan Description
	Desc string `json:"desc"`
	// Subscription Plan Price
	Price float32 `json:"price"`
	// Subscription Plan Currency
	Currency string `json:"currency"`
	// Subscription Plan Billing Interval
	BillingCycle string `json:"billing_cycle"`
	// Subscription Plan Billing Interval
	BillingInterval int32 `json:"billing_interval"`
	// Subscription Plan Status
	Status string `json:"status"`
	// Subscription Plan Updated At
	UpdatedAt time.Time `json:"updated_at"`
	// Subscription Plan Created At
	CreatedAt time.Time `json:"created_at"`
}

type _SubPlanDataAttributes SubPlanDataAttributes

// NewSubPlanDataAttributes instantiates a new SubPlanDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubPlanDataAttributes(typeId string, name string, desc string, price float32, currency string, billingCycle string, billingInterval int32, status string, updatedAt time.Time, createdAt time.Time) *SubPlanDataAttributes {
	this := SubPlanDataAttributes{}
	this.TypeId = typeId
	this.Name = name
	this.Desc = desc
	this.Price = price
	this.Currency = currency
	this.BillingCycle = billingCycle
	this.BillingInterval = billingInterval
	this.Status = status
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewSubPlanDataAttributesWithDefaults instantiates a new SubPlanDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubPlanDataAttributesWithDefaults() *SubPlanDataAttributes {
	this := SubPlanDataAttributes{}
	return &this
}

// GetTypeId returns the TypeId field value
func (o *SubPlanDataAttributes) GetTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *SubPlanDataAttributes) SetTypeId(v string) {
	o.TypeId = v
}

// GetName returns the Name field value
func (o *SubPlanDataAttributes) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubPlanDataAttributes) SetName(v string) {
	o.Name = v
}

// GetDesc returns the Desc field value
func (o *SubPlanDataAttributes) GetDesc() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Desc
}

// GetDescOk returns a tuple with the Desc field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetDescOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Desc, true
}

// SetDesc sets field value
func (o *SubPlanDataAttributes) SetDesc(v string) {
	o.Desc = v
}

// GetPrice returns the Price field value
func (o *SubPlanDataAttributes) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SubPlanDataAttributes) SetPrice(v float32) {
	o.Price = v
}

// GetCurrency returns the Currency field value
func (o *SubPlanDataAttributes) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *SubPlanDataAttributes) SetCurrency(v string) {
	o.Currency = v
}

// GetBillingCycle returns the BillingCycle field value
func (o *SubPlanDataAttributes) GetBillingCycle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BillingCycle
}

// GetBillingCycleOk returns a tuple with the BillingCycle field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetBillingCycleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingCycle, true
}

// SetBillingCycle sets field value
func (o *SubPlanDataAttributes) SetBillingCycle(v string) {
	o.BillingCycle = v
}

// GetBillingInterval returns the BillingInterval field value
func (o *SubPlanDataAttributes) GetBillingInterval() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BillingInterval
}

// GetBillingIntervalOk returns a tuple with the BillingInterval field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetBillingIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BillingInterval, true
}

// SetBillingInterval sets field value
func (o *SubPlanDataAttributes) SetBillingInterval(v int32) {
	o.BillingInterval = v
}

// GetStatus returns the Status field value
func (o *SubPlanDataAttributes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SubPlanDataAttributes) SetStatus(v string) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *SubPlanDataAttributes) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *SubPlanDataAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SubPlanDataAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SubPlanDataAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SubPlanDataAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o SubPlanDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubPlanDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type_id"] = o.TypeId
	toSerialize["name"] = o.Name
	toSerialize["desc"] = o.Desc
	toSerialize["price"] = o.Price
	toSerialize["currency"] = o.Currency
	toSerialize["billing_cycle"] = o.BillingCycle
	toSerialize["billing_interval"] = o.BillingInterval
	toSerialize["status"] = o.Status
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *SubPlanDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type_id",
		"name",
		"desc",
		"price",
		"currency",
		"billing_cycle",
		"billing_interval",
		"status",
		"updated_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubPlanDataAttributes := _SubPlanDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubPlanDataAttributes)

	if err != nil {
		return err
	}

	*o = SubPlanDataAttributes(varSubPlanDataAttributes)

	return err
}

type NullableSubPlanDataAttributes struct {
	value *SubPlanDataAttributes
	isSet bool
}

func (v NullableSubPlanDataAttributes) Get() *SubPlanDataAttributes {
	return v.value
}

func (v *NullableSubPlanDataAttributes) Set(val *SubPlanDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSubPlanDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSubPlanDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubPlanDataAttributes(val *SubPlanDataAttributes) *NullableSubPlanDataAttributes {
	return &NullableSubPlanDataAttributes{value: val, isSet: true}
}

func (v NullableSubPlanDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubPlanDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


