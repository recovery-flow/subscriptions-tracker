/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubPlansCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubPlansCollection{}

// SubPlansCollection struct for SubPlansCollection
type SubPlansCollection struct {
	Data []SubPlanData `json:"data"`
	Links LinksPagination `json:"links"`
}

type _SubPlansCollection SubPlansCollection

// NewSubPlansCollection instantiates a new SubPlansCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubPlansCollection(data []SubPlanData, links LinksPagination) *SubPlansCollection {
	this := SubPlansCollection{}
	this.Data = data
	this.Links = links
	return &this
}

// NewSubPlansCollectionWithDefaults instantiates a new SubPlansCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubPlansCollectionWithDefaults() *SubPlansCollection {
	this := SubPlansCollection{}
	return &this
}

// GetData returns the Data field value
func (o *SubPlansCollection) GetData() []SubPlanData {
	if o == nil {
		var ret []SubPlanData
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *SubPlansCollection) GetDataOk() ([]SubPlanData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *SubPlansCollection) SetData(v []SubPlanData) {
	o.Data = v
}

// GetLinks returns the Links field value
func (o *SubPlansCollection) GetLinks() LinksPagination {
	if o == nil {
		var ret LinksPagination
		return ret
	}

	return o.Links
}

// GetLinksOk returns a tuple with the Links field value
// and a boolean to check if the value has been set.
func (o *SubPlansCollection) GetLinksOk() (*LinksPagination, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Links, true
}

// SetLinks sets field value
func (o *SubPlansCollection) SetLinks(v LinksPagination) {
	o.Links = v
}

func (o SubPlansCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubPlansCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["links"] = o.Links
	return toSerialize, nil
}

func (o *SubPlansCollection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"links",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubPlansCollection := _SubPlansCollection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubPlansCollection)

	if err != nil {
		return err
	}

	*o = SubPlansCollection(varSubPlansCollection)

	return err
}

type NullableSubPlansCollection struct {
	value *SubPlansCollection
	isSet bool
}

func (v NullableSubPlansCollection) Get() *SubPlansCollection {
	return v.value
}

func (v *NullableSubPlansCollection) Set(val *SubPlansCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableSubPlansCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableSubPlansCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubPlansCollection(val *SubPlansCollection) *NullableSubPlansCollection {
	return &NullableSubPlansCollection{value: val, isSet: true}
}

func (v NullableSubPlansCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubPlansCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


