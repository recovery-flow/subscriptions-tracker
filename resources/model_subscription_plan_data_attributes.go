/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the SubscriptionPlanDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlanDataAttributes{}

// SubscriptionPlanDataAttributes struct for SubscriptionPlanDataAttributes
type SubscriptionPlanDataAttributes struct {
	// Title
	Title string `json:"title"`
	// Price
	Price float32 `json:"price"`
	// Currency
	Currency string `json:"currency"`
	// Pay frequency
	PayFrequency string `json:"pay_frequency"`
	// Status
	Status string `json:"status"`
	// Updated at
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	// Created at
	CreatedAt time.Time `json:"created_at"`
}

type _SubscriptionPlanDataAttributes SubscriptionPlanDataAttributes

// NewSubscriptionPlanDataAttributes instantiates a new SubscriptionPlanDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlanDataAttributes(title string, price float32, currency string, payFrequency string, status string, createdAt time.Time) *SubscriptionPlanDataAttributes {
	this := SubscriptionPlanDataAttributes{}
	this.Title = title
	this.Price = price
	this.Currency = currency
	this.PayFrequency = payFrequency
	this.Status = status
	this.CreatedAt = createdAt
	return &this
}

// NewSubscriptionPlanDataAttributesWithDefaults instantiates a new SubscriptionPlanDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlanDataAttributesWithDefaults() *SubscriptionPlanDataAttributes {
	this := SubscriptionPlanDataAttributes{}
	return &this
}

// GetTitle returns the Title field value
func (o *SubscriptionPlanDataAttributes) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataAttributes) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SubscriptionPlanDataAttributes) SetTitle(v string) {
	o.Title = v
}

// GetPrice returns the Price field value
func (o *SubscriptionPlanDataAttributes) GetPrice() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Price
}

// GetPriceOk returns a tuple with the Price field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataAttributes) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Price, true
}

// SetPrice sets field value
func (o *SubscriptionPlanDataAttributes) SetPrice(v float32) {
	o.Price = v
}

// GetCurrency returns the Currency field value
func (o *SubscriptionPlanDataAttributes) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataAttributes) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *SubscriptionPlanDataAttributes) SetCurrency(v string) {
	o.Currency = v
}

// GetPayFrequency returns the PayFrequency field value
func (o *SubscriptionPlanDataAttributes) GetPayFrequency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PayFrequency
}

// GetPayFrequencyOk returns a tuple with the PayFrequency field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataAttributes) GetPayFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PayFrequency, true
}

// SetPayFrequency sets field value
func (o *SubscriptionPlanDataAttributes) SetPayFrequency(v string) {
	o.PayFrequency = v
}

// GetStatus returns the Status field value
func (o *SubscriptionPlanDataAttributes) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataAttributes) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SubscriptionPlanDataAttributes) SetStatus(v string) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *SubscriptionPlanDataAttributes) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *SubscriptionPlanDataAttributes) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *SubscriptionPlanDataAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *SubscriptionPlanDataAttributes) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataAttributes) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *SubscriptionPlanDataAttributes) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *SubscriptionPlanDataAttributes) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *SubscriptionPlanDataAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlanDataAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *SubscriptionPlanDataAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o SubscriptionPlanDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlanDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["title"] = o.Title
	toSerialize["price"] = o.Price
	toSerialize["currency"] = o.Currency
	toSerialize["pay_frequency"] = o.PayFrequency
	toSerialize["status"] = o.Status
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *SubscriptionPlanDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"price",
		"currency",
		"pay_frequency",
		"status",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPlanDataAttributes := _SubscriptionPlanDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionPlanDataAttributes)

	if err != nil {
		return err
	}

	*o = SubscriptionPlanDataAttributes(varSubscriptionPlanDataAttributes)

	return err
}

type NullableSubscriptionPlanDataAttributes struct {
	value *SubscriptionPlanDataAttributes
	isSet bool
}

func (v NullableSubscriptionPlanDataAttributes) Get() *SubscriptionPlanDataAttributes {
	return v.value
}

func (v *NullableSubscriptionPlanDataAttributes) Set(val *SubscriptionPlanDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlanDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlanDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlanDataAttributes(val *SubscriptionPlanDataAttributes) *NullableSubscriptionPlanDataAttributes {
	return &NullableSubscriptionPlanDataAttributes{value: val, isSet: true}
}

func (v NullableSubscriptionPlanDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlanDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


