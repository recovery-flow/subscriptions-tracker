/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the TransactionDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionDataAttributes{}

// TransactionDataAttributes struct for TransactionDataAttributes
type TransactionDataAttributes struct {
	// User ID
	UserId *string `json:"user_id,omitempty"`
	// Plan ID
	PlanId *string `json:"plan_id,omitempty"`
	// Subscriber ID
	SubId *string `json:"sub_id,omitempty"`
	// Transaction amount
	Amount float32 `json:"amount"`
	// Transaction currency
	Currency string `json:"currency"`
	// Payment method
	PaymentMethod string `json:"payment_method"`
	// Provider transaction ID
	ProviderTransactionId string `json:"provider_transaction_id"`
	// Transaction creation date
	CreatedAt time.Time `json:"created_at"`
}

type _TransactionDataAttributes TransactionDataAttributes

// NewTransactionDataAttributes instantiates a new TransactionDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionDataAttributes(amount float32, currency string, paymentMethod string, providerTransactionId string, createdAt time.Time) *TransactionDataAttributes {
	this := TransactionDataAttributes{}
	this.Amount = amount
	this.Currency = currency
	this.PaymentMethod = paymentMethod
	this.ProviderTransactionId = providerTransactionId
	this.CreatedAt = createdAt
	return &this
}

// NewTransactionDataAttributesWithDefaults instantiates a new TransactionDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionDataAttributesWithDefaults() *TransactionDataAttributes {
	this := TransactionDataAttributes{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TransactionDataAttributes) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDataAttributes) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TransactionDataAttributes) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *TransactionDataAttributes) SetUserId(v string) {
	o.UserId = &v
}

// GetPlanId returns the PlanId field value if set, zero value otherwise.
func (o *TransactionDataAttributes) GetPlanId() string {
	if o == nil || IsNil(o.PlanId) {
		var ret string
		return ret
	}
	return *o.PlanId
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDataAttributes) GetPlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.PlanId) {
		return nil, false
	}
	return o.PlanId, true
}

// HasPlanId returns a boolean if a field has been set.
func (o *TransactionDataAttributes) HasPlanId() bool {
	if o != nil && !IsNil(o.PlanId) {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given string and assigns it to the PlanId field.
func (o *TransactionDataAttributes) SetPlanId(v string) {
	o.PlanId = &v
}

// GetSubId returns the SubId field value if set, zero value otherwise.
func (o *TransactionDataAttributes) GetSubId() string {
	if o == nil || IsNil(o.SubId) {
		var ret string
		return ret
	}
	return *o.SubId
}

// GetSubIdOk returns a tuple with the SubId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionDataAttributes) GetSubIdOk() (*string, bool) {
	if o == nil || IsNil(o.SubId) {
		return nil, false
	}
	return o.SubId, true
}

// HasSubId returns a boolean if a field has been set.
func (o *TransactionDataAttributes) HasSubId() bool {
	if o != nil && !IsNil(o.SubId) {
		return true
	}

	return false
}

// SetSubId gets a reference to the given string and assigns it to the SubId field.
func (o *TransactionDataAttributes) SetSubId(v string) {
	o.SubId = &v
}

// GetAmount returns the Amount field value
func (o *TransactionDataAttributes) GetAmount() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TransactionDataAttributes) GetAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TransactionDataAttributes) SetAmount(v float32) {
	o.Amount = v
}

// GetCurrency returns the Currency field value
func (o *TransactionDataAttributes) GetCurrency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value
// and a boolean to check if the value has been set.
func (o *TransactionDataAttributes) GetCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Currency, true
}

// SetCurrency sets field value
func (o *TransactionDataAttributes) SetCurrency(v string) {
	o.Currency = v
}

// GetPaymentMethod returns the PaymentMethod field value
func (o *TransactionDataAttributes) GetPaymentMethod() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaymentMethod
}

// GetPaymentMethodOk returns a tuple with the PaymentMethod field value
// and a boolean to check if the value has been set.
func (o *TransactionDataAttributes) GetPaymentMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentMethod, true
}

// SetPaymentMethod sets field value
func (o *TransactionDataAttributes) SetPaymentMethod(v string) {
	o.PaymentMethod = v
}

// GetProviderTransactionId returns the ProviderTransactionId field value
func (o *TransactionDataAttributes) GetProviderTransactionId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProviderTransactionId
}

// GetProviderTransactionIdOk returns a tuple with the ProviderTransactionId field value
// and a boolean to check if the value has been set.
func (o *TransactionDataAttributes) GetProviderTransactionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProviderTransactionId, true
}

// SetProviderTransactionId sets field value
func (o *TransactionDataAttributes) SetProviderTransactionId(v string) {
	o.ProviderTransactionId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TransactionDataAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TransactionDataAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TransactionDataAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o TransactionDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	if !IsNil(o.PlanId) {
		toSerialize["plan_id"] = o.PlanId
	}
	if !IsNil(o.SubId) {
		toSerialize["sub_id"] = o.SubId
	}
	toSerialize["amount"] = o.Amount
	toSerialize["currency"] = o.Currency
	toSerialize["payment_method"] = o.PaymentMethod
	toSerialize["provider_transaction_id"] = o.ProviderTransactionId
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *TransactionDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"amount",
		"currency",
		"payment_method",
		"provider_transaction_id",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionDataAttributes := _TransactionDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionDataAttributes)

	if err != nil {
		return err
	}

	*o = TransactionDataAttributes(varTransactionDataAttributes)

	return err
}

type NullableTransactionDataAttributes struct {
	value *TransactionDataAttributes
	isSet bool
}

func (v NullableTransactionDataAttributes) Get() *TransactionDataAttributes {
	return v.value
}

func (v *NullableTransactionDataAttributes) Set(val *TransactionDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionDataAttributes(val *TransactionDataAttributes) *NullableTransactionDataAttributes {
	return &NullableTransactionDataAttributes{value: val, isSet: true}
}

func (v NullableTransactionDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


