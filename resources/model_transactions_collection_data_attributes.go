/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TransactionsCollectionDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionsCollectionDataAttributes{}

// TransactionsCollectionDataAttributes struct for TransactionsCollectionDataAttributes
type TransactionsCollectionDataAttributes struct {
	TransactionPlans []TransactionData `json:"transaction_plans"`
}

type _TransactionsCollectionDataAttributes TransactionsCollectionDataAttributes

// NewTransactionsCollectionDataAttributes instantiates a new TransactionsCollectionDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionsCollectionDataAttributes(transactionPlans []TransactionData) *TransactionsCollectionDataAttributes {
	this := TransactionsCollectionDataAttributes{}
	this.TransactionPlans = transactionPlans
	return &this
}

// NewTransactionsCollectionDataAttributesWithDefaults instantiates a new TransactionsCollectionDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionsCollectionDataAttributesWithDefaults() *TransactionsCollectionDataAttributes {
	this := TransactionsCollectionDataAttributes{}
	return &this
}

// GetTransactionPlans returns the TransactionPlans field value
func (o *TransactionsCollectionDataAttributes) GetTransactionPlans() []TransactionData {
	if o == nil {
		var ret []TransactionData
		return ret
	}

	return o.TransactionPlans
}

// GetTransactionPlansOk returns a tuple with the TransactionPlans field value
// and a boolean to check if the value has been set.
func (o *TransactionsCollectionDataAttributes) GetTransactionPlansOk() ([]TransactionData, bool) {
	if o == nil {
		return nil, false
	}
	return o.TransactionPlans, true
}

// SetTransactionPlans sets field value
func (o *TransactionsCollectionDataAttributes) SetTransactionPlans(v []TransactionData) {
	o.TransactionPlans = v
}

func (o TransactionsCollectionDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionsCollectionDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["transaction_plans"] = o.TransactionPlans
	return toSerialize, nil
}

func (o *TransactionsCollectionDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"transaction_plans",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransactionsCollectionDataAttributes := _TransactionsCollectionDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransactionsCollectionDataAttributes)

	if err != nil {
		return err
	}

	*o = TransactionsCollectionDataAttributes(varTransactionsCollectionDataAttributes)

	return err
}

type NullableTransactionsCollectionDataAttributes struct {
	value *TransactionsCollectionDataAttributes
	isSet bool
}

func (v NullableTransactionsCollectionDataAttributes) Get() *TransactionsCollectionDataAttributes {
	return v.value
}

func (v *NullableTransactionsCollectionDataAttributes) Set(val *TransactionsCollectionDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionsCollectionDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionsCollectionDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionsCollectionDataAttributes(val *TransactionsCollectionDataAttributes) *NullableTransactionsCollectionDataAttributes {
	return &NullableTransactionsCollectionDataAttributes{value: val, isSet: true}
}

func (v NullableTransactionsCollectionDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionsCollectionDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


