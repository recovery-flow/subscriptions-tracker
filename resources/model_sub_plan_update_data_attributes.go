/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
)

// checks if the SubPlanUpdateDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubPlanUpdateDataAttributes{}

// SubPlanUpdateDataAttributes struct for SubPlanUpdateDataAttributes
type SubPlanUpdateDataAttributes struct {
	// Name
	Name *string `json:"name,omitempty"`
	// Description
	Desc *string `json:"desc,omitempty"`
	// Price
	Price *float32 `json:"price,omitempty"`
	// Currency
	Currency *string `json:"currency,omitempty"`
	// Status
	Status *string `json:"status,omitempty"`
}

// NewSubPlanUpdateDataAttributes instantiates a new SubPlanUpdateDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubPlanUpdateDataAttributes() *SubPlanUpdateDataAttributes {
	this := SubPlanUpdateDataAttributes{}
	return &this
}

// NewSubPlanUpdateDataAttributesWithDefaults instantiates a new SubPlanUpdateDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubPlanUpdateDataAttributesWithDefaults() *SubPlanUpdateDataAttributes {
	this := SubPlanUpdateDataAttributes{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SubPlanUpdateDataAttributes) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPlanUpdateDataAttributes) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SubPlanUpdateDataAttributes) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SubPlanUpdateDataAttributes) SetName(v string) {
	o.Name = &v
}

// GetDesc returns the Desc field value if set, zero value otherwise.
func (o *SubPlanUpdateDataAttributes) GetDesc() string {
	if o == nil || IsNil(o.Desc) {
		var ret string
		return ret
	}
	return *o.Desc
}

// GetDescOk returns a tuple with the Desc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPlanUpdateDataAttributes) GetDescOk() (*string, bool) {
	if o == nil || IsNil(o.Desc) {
		return nil, false
	}
	return o.Desc, true
}

// HasDesc returns a boolean if a field has been set.
func (o *SubPlanUpdateDataAttributes) HasDesc() bool {
	if o != nil && !IsNil(o.Desc) {
		return true
	}

	return false
}

// SetDesc gets a reference to the given string and assigns it to the Desc field.
func (o *SubPlanUpdateDataAttributes) SetDesc(v string) {
	o.Desc = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *SubPlanUpdateDataAttributes) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPlanUpdateDataAttributes) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *SubPlanUpdateDataAttributes) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *SubPlanUpdateDataAttributes) SetPrice(v float32) {
	o.Price = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *SubPlanUpdateDataAttributes) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPlanUpdateDataAttributes) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *SubPlanUpdateDataAttributes) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *SubPlanUpdateDataAttributes) SetCurrency(v string) {
	o.Currency = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *SubPlanUpdateDataAttributes) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubPlanUpdateDataAttributes) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *SubPlanUpdateDataAttributes) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *SubPlanUpdateDataAttributes) SetStatus(v string) {
	o.Status = &v
}

func (o SubPlanUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubPlanUpdateDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Desc) {
		toSerialize["desc"] = o.Desc
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableSubPlanUpdateDataAttributes struct {
	value *SubPlanUpdateDataAttributes
	isSet bool
}

func (v NullableSubPlanUpdateDataAttributes) Get() *SubPlanUpdateDataAttributes {
	return v.value
}

func (v *NullableSubPlanUpdateDataAttributes) Set(val *SubPlanUpdateDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSubPlanUpdateDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSubPlanUpdateDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubPlanUpdateDataAttributes(val *SubPlanUpdateDataAttributes) *NullableSubPlanUpdateDataAttributes {
	return &NullableSubPlanUpdateDataAttributes{value: val, isSet: true}
}

func (v NullableSubPlanUpdateDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubPlanUpdateDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


