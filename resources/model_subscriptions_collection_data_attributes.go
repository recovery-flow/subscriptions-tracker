/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubscriptionsCollectionDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionsCollectionDataAttributes{}

// SubscriptionsCollectionDataAttributes struct for SubscriptionsCollectionDataAttributes
type SubscriptionsCollectionDataAttributes struct {
	Subscriptions []SubscriptionData `json:"subscriptions"`
}

type _SubscriptionsCollectionDataAttributes SubscriptionsCollectionDataAttributes

// NewSubscriptionsCollectionDataAttributes instantiates a new SubscriptionsCollectionDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionsCollectionDataAttributes(subscriptions []SubscriptionData) *SubscriptionsCollectionDataAttributes {
	this := SubscriptionsCollectionDataAttributes{}
	this.Subscriptions = subscriptions
	return &this
}

// NewSubscriptionsCollectionDataAttributesWithDefaults instantiates a new SubscriptionsCollectionDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionsCollectionDataAttributesWithDefaults() *SubscriptionsCollectionDataAttributes {
	this := SubscriptionsCollectionDataAttributes{}
	return &this
}

// GetSubscriptions returns the Subscriptions field value
func (o *SubscriptionsCollectionDataAttributes) GetSubscriptions() []SubscriptionData {
	if o == nil {
		var ret []SubscriptionData
		return ret
	}

	return o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value
// and a boolean to check if the value has been set.
func (o *SubscriptionsCollectionDataAttributes) GetSubscriptionsOk() ([]SubscriptionData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subscriptions, true
}

// SetSubscriptions sets field value
func (o *SubscriptionsCollectionDataAttributes) SetSubscriptions(v []SubscriptionData) {
	o.Subscriptions = v
}

func (o SubscriptionsCollectionDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionsCollectionDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscriptions"] = o.Subscriptions
	return toSerialize, nil
}

func (o *SubscriptionsCollectionDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriptions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionsCollectionDataAttributes := _SubscriptionsCollectionDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionsCollectionDataAttributes)

	if err != nil {
		return err
	}

	*o = SubscriptionsCollectionDataAttributes(varSubscriptionsCollectionDataAttributes)

	return err
}

type NullableSubscriptionsCollectionDataAttributes struct {
	value *SubscriptionsCollectionDataAttributes
	isSet bool
}

func (v NullableSubscriptionsCollectionDataAttributes) Get() *SubscriptionsCollectionDataAttributes {
	return v.value
}

func (v *NullableSubscriptionsCollectionDataAttributes) Set(val *SubscriptionsCollectionDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionsCollectionDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionsCollectionDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionsCollectionDataAttributes(val *SubscriptionsCollectionDataAttributes) *NullableSubscriptionsCollectionDataAttributes {
	return &NullableSubscriptionsCollectionDataAttributes{value: val, isSet: true}
}

func (v NullableSubscriptionsCollectionDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionsCollectionDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


