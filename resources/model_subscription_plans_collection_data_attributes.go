/*
User storage service

User storage service for recovery flow

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SubscriptionPlansCollectionDataAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubscriptionPlansCollectionDataAttributes{}

// SubscriptionPlansCollectionDataAttributes struct for SubscriptionPlansCollectionDataAttributes
type SubscriptionPlansCollectionDataAttributes struct {
	SubscriptionPlans []SubscriptionPlanData `json:"subscription_plans"`
}

type _SubscriptionPlansCollectionDataAttributes SubscriptionPlansCollectionDataAttributes

// NewSubscriptionPlansCollectionDataAttributes instantiates a new SubscriptionPlansCollectionDataAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionPlansCollectionDataAttributes(subscriptionPlans []SubscriptionPlanData) *SubscriptionPlansCollectionDataAttributes {
	this := SubscriptionPlansCollectionDataAttributes{}
	this.SubscriptionPlans = subscriptionPlans
	return &this
}

// NewSubscriptionPlansCollectionDataAttributesWithDefaults instantiates a new SubscriptionPlansCollectionDataAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionPlansCollectionDataAttributesWithDefaults() *SubscriptionPlansCollectionDataAttributes {
	this := SubscriptionPlansCollectionDataAttributes{}
	return &this
}

// GetSubscriptionPlans returns the SubscriptionPlans field value
func (o *SubscriptionPlansCollectionDataAttributes) GetSubscriptionPlans() []SubscriptionPlanData {
	if o == nil {
		var ret []SubscriptionPlanData
		return ret
	}

	return o.SubscriptionPlans
}

// GetSubscriptionPlansOk returns a tuple with the SubscriptionPlans field value
// and a boolean to check if the value has been set.
func (o *SubscriptionPlansCollectionDataAttributes) GetSubscriptionPlansOk() ([]SubscriptionPlanData, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionPlans, true
}

// SetSubscriptionPlans sets field value
func (o *SubscriptionPlansCollectionDataAttributes) SetSubscriptionPlans(v []SubscriptionPlanData) {
	o.SubscriptionPlans = v
}

func (o SubscriptionPlansCollectionDataAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubscriptionPlansCollectionDataAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subscription_plans"] = o.SubscriptionPlans
	return toSerialize, nil
}

func (o *SubscriptionPlansCollectionDataAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscription_plans",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubscriptionPlansCollectionDataAttributes := _SubscriptionPlansCollectionDataAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSubscriptionPlansCollectionDataAttributes)

	if err != nil {
		return err
	}

	*o = SubscriptionPlansCollectionDataAttributes(varSubscriptionPlansCollectionDataAttributes)

	return err
}

type NullableSubscriptionPlansCollectionDataAttributes struct {
	value *SubscriptionPlansCollectionDataAttributes
	isSet bool
}

func (v NullableSubscriptionPlansCollectionDataAttributes) Get() *SubscriptionPlansCollectionDataAttributes {
	return v.value
}

func (v *NullableSubscriptionPlansCollectionDataAttributes) Set(val *SubscriptionPlansCollectionDataAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionPlansCollectionDataAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionPlansCollectionDataAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionPlansCollectionDataAttributes(val *SubscriptionPlansCollectionDataAttributes) *NullableSubscriptionPlansCollectionDataAttributes {
	return &NullableSubscriptionPlansCollectionDataAttributes{value: val, isSet: true}
}

func (v NullableSubscriptionPlansCollectionDataAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionPlansCollectionDataAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


